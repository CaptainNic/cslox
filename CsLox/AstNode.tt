<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#
var defsPath = Host.ResolvePath("AstNodeDefs.txt");

List<ClassDescriptor> classDescriptors = new List<ClassDescriptor>();

var nodeDefs = File.ReadAllLines(defsPath);
foreach (var def in nodeDefs)
{
	if (string.IsNullOrWhiteSpace(def))
    {
		continue;
    }

	var classDescriptor = new ClassDescriptor();
	classDescriptor.Name = def.Split(':')[0].Trim();
	foreach (var fieldString in def.Split(':')[1].Split(','))
	{
		var value = fieldString.Trim();
		classDescriptor.Fields.Add( new FieldDescriptor
		{
			Type = value.Split(' ')[0],
			Name = value.Split(' ')[1]
		});
	}
	classDescriptors.Add(classDescriptor);
}
#>
/* DO NOT MODIFY - Auto-generated by CodeGen.tt */
using System.Collections.Generic;

namespace CsLox
{
	public abstract class AstNode
	{
		public interface IVisitor<T>
		{
<#
foreach (var classDesc in classDescriptors)
{
#>
			T Visit<#=classDesc.Name#>(<#=classDesc.Name#> astNode);		
<#
}
#>
		}

		public abstract T Accept<T>(IVisitor<T> visitor);
	}

<#
foreach (var classDesc in classDescriptors)
{
#>
	public class <#=classDesc.Name#> : AstNode
	{
<#
	foreach (FieldDescriptor field in classDesc.Fields)
	{
#>
		public readonly <#=field.Type#> <#=field.Name#>;
<#
    }	
#>

		public <#=classDesc.Name#>(<#=classDesc.ParameterString()#>)
		{
<#
	foreach (FieldDescriptor field in classDesc.Fields)
	{
#>
			this.<#=field.Name#> = <#=field.Name#>;
<#
	}
#>
		}

		public override T Accept<T>(IVisitor<T> visitor)
		{
			return visitor.Visit<#=classDesc.Name#>(this);
		}
	}
<#
}
#>
}
<#+
class ClassDescriptor
{
    public string Name;
    public List<FieldDescriptor> Fields = new List<FieldDescriptor>();

	public string ParameterString()
	{
		string result = "";
		for (int i = 0; i < Fields.Count; ++i)
		{
			if (i > 0)
			{
				result += ", ";
			}
			result += Fields[i].Type + " " + Fields[i].Name;
		}
		return result;
	}
}

class FieldDescriptor
{
    public string Type;
    public string Name;
}
#>
