<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
<#@ include file="TemplateFileManagerV2.1.ttinclude" #>
<#
var datasets = new Dictionary<string, string> {
    { "Expr", "ExprDefs.txt" },
    { "Stmt", "StmtDefs.txt" }
};

var templateManager = TemplateFileManager.Create(this);

foreach (var dataset in datasets)
{
	var baseClassName = dataset.Key;
	var defsPath = Host.ResolvePath(dataset.Value);

	List<ClassDescriptor> classDescriptors = new List<ClassDescriptor>();

	var exprDefs = File.ReadAllLines(defsPath);
	foreach (var def in exprDefs)
	{
		var classDescriptor = new ClassDescriptor();
		classDescriptor.Name = def.Split(':')[0].Trim() + baseClassName;
		foreach (var fieldString in def.Split(':')[1].Split(','))
		{
			var value = fieldString.Trim();
			classDescriptor.Fields.Add( new FieldDescriptor
			{
				Type = value.Split(' ')[0],
				Name = value.Split(' ')[1]
			});
		}
		classDescriptors.Add(classDescriptor);
	}
	
	templateManager.StartNewFile(baseClassName + ".cs");
#>
/* DO NOT MODIFY - Auto-generated by CodeGen.tt */
namespace CsLox
{
	public abstract class <#=baseClassName#>
	{
		public interface IVisitor<T>
		{
<#
	foreach (var classDesc in classDescriptors)
	{
#>
			T Visit<#=classDesc.Name#>(<#=classDesc.Name#> <#=baseClassName.ToLower()#>);		
<#
	}
#>
		}

		public abstract T Accept<T>(IVisitor<T> visitor);
	}

<#
	foreach (var classDesc in classDescriptors)
	{
#>
	public class <#=classDesc.Name#> : <#=baseClassName#>
	{
<#
		foreach (FieldDescriptor field in classDesc.Fields)
		{
#>
		public readonly <#=field.Type#> <#=field.Name#>;
<#
        }	
#>

		public <#=classDesc.Name#>(<#=classDesc.ParameterString()#>)
		{
<#
		foreach (FieldDescriptor field in classDesc.Fields)
		{
#>
			this.<#=field.Name#> = <#=field.Name#>;
<#
		}
#>
		}

		public override T Accept<T>(IVisitor<T> visitor)
		{
			return visitor.Visit<#=classDesc.Name#>(this);
		}
	}
<#
	}
#>
}
<#
}

templateManager.Process();
#>
<#+
class ClassDescriptor
{
    public string Name;
    public List<FieldDescriptor> Fields = new List<FieldDescriptor>();

	public string ParameterString()
	{
		string result = "";
		for (int i = 0; i < Fields.Count; ++i)
		{
			if (i > 0)
			{
				result += ", ";
			}
			result += Fields[i].Type + " " + Fields[i].Name;
		}
		return result;
	}
}

class FieldDescriptor
{
    public string Type;
    public string Name;
}
#>
